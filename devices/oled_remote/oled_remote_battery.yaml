substitutions:
  BOARD: "esp32-c3-devkitm-1"
  DEVICE_NAME: "ac-lolin"
  FRIENDLY_NAME: "AC Lolin"
  API_KEY: "your_key_from_home_assistant_api"
  PIN_WAKE: "3"
  PIN_ADC: "2"
  PIN_I2C_SDA: "6"
  PIN_I2C_SCL: "7"
  PIN_BTN_CONTRAST: "4"
  PIN_BTN_SWITCH_AC: "20"
  PIN_BTN_TOGGLE: "8"
  PIN_BTN_FAN: "5"
  PIN_BTN_MODE: "9"
  PIN_BTN_TEMP_UP: "21"
  PIN_BTN_TEMP_DOWN: "10"

font:
  - file: "fonts/arial_bold.ttf"
    id: basic
    size: 14
    glyphs: [0123456789.ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz, "_", " ", ":"]
  - file: "fonts/arial_bold.ttf"
    id: small
    size: 10
    glyphs: [0123456789.ADEFGHILMNOTUWVRY, " "]
  - file: "fonts/arial_bold.ttf"
    id: bigger
    size: 28
    glyphs: [0123456789.ADEGHILMOTUWRY]
  - file: "fonts/arial_bold.ttf"
    id: big
    size: 40
    glyphs: [0123456789.ADEGHILMOTUWRY]
  - file:
      type: gfonts
      family: Material+Symbols+Rounded
      weight: 400
    id: symbols_small
    size: 18   
    glyphs: [
      "\ueae6", # up
      "\uf887", # fan
      "\ue5d5", # refresh
      "\ue8ac", # off,
      "\uea35", # ECO Simplier
    ]
  - file:
      type: gfonts
      family: Material+Symbols+Rounded
      weight: 400
    id: symbols
    size: 24   
    glyphs: [
      "\uf168", # fan
      "\ueb3b", # AC
      "\uf164", # dry
      "\ue8ac", # off,
      "\ue88b", # loading
      "\uf8be", # ECO
    ]
  - file:
      type: gfonts
      family: Material+Symbols+Rounded
      weight: 700
    id: symbols_big
    size: 36   
    glyphs: [
      "\uf168", # fan
      "\ueb3b", # AC
      "\uf164", # dry
      "\ue8ac", # off,
      "\ue88b", # loading
    ]

esphome:
  name: seeduino-ac
  friendly_name: Seeduino AC
  min_version: 2024.11.0
  name_add_mac_suffix: false
  on_boot:
    - priority: 250
      then:
        - lambda: |-
            id(last_active) = millis() / 1000;
    - priority: 600
      then:
        - delay: 3s
        - component.update: adc_raw
  includes:
    - ac_entities.h

esp32:
  board: ${BOARD}
  framework:
    type: arduino

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  use_address: 10.10.10.56
  output_power: 10dB
  fast_connect: true
  power_save_mode: LIGHT

api:
  reboot_timeout: 0s
  encryption:
    key: "Tve7wHTAPAyEVS4FcLDtqcZfz66xhztkr2pR0pxe4lk="

ota:
  - platform: esphome

logger:

deep_sleep:
  id: go_sleep
  sleep_duration: 4320min # 3 days intervals - just to update battery level
  wakeup_pin: 
    number: ${PIN_WAKE}
    allow_other_uses: true
  wakeup_pin_mode: INVERT_WAKEUP

i2c:
  sda: ${PIN_I2C_SDA}
  scl: ${PIN_I2C_SCL}
  frequency: 400kHz
  scan: false

display:
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    address: 0x3C
    rotation: 180
    contrast: 0.5
    id: oled_display

globals:
  - id: battery_v
    type: float
    initial_value: '0'
    restore_value: True

  - id: debounce_active
    type: bool
    initial_value: 'false'

  - id: contrast
    type: int
    initial_value: '5'
    restore_value: True

  - id: last_active
    type: int
    restore_value: no
    initial_value: '0'

  - id: updated_ui
    type: bool
    initial_value: 'true'

  - id: selected_ac_index
    type: int
    initial_value: '0'
    restore_value: True
  - id: selected_ac
    type: std::string
    initial_value: '"climate.living_room_ac"'
    restore_value: True
  - id: selected_ac_name
    type: std::string
    initial_value: '"Living"'
    restore_value: True

  - id: selected_ac_mode_index
    type: int
    initial_value: '0'
  - id: current_ac_mode
    type: std::string
    initial_value: '"unknown"'
  - id: selected_ac_mode
    type: std::string
    initial_value: '"unknown"'

  - id: current_temp
    type: int
    initial_value: '-1'
  - id: selected_temp
    type: int
    initial_value: '-1'

  - id: selected_fan_index
    type: int
    initial_value: '0'
  - id: current_fan_mode
    type: std::string
    initial_value: '"unknown"'
  - id: selected_fan_mode
    type: std::string
    initial_value: '"unknown"'

sensor:
  - platform: homeassistant
    id: living_room_ac_temp
    entity_id: climate.living_room_ac
    attribute: temperature
    on_value:
      then:
        - script.execute: set_current_states
        - script.execute: set_selections

  - platform: homeassistant
    id: office_ac_temp
    entity_id: climate.office_ac
    attribute: temperature
    on_value:
      then:
        - script.execute: set_current_states
        - script.execute: set_selections

  - platform: homeassistant
    id: bedroom_ac_temp
    entity_id: climate.bedroom_ac
    attribute: temperature
    on_value:
      then:
        - script.execute: set_current_states
        - script.execute: set_selections

  - platform: adc
    id: adc_raw
    pin: ${PIN_ADC}
    attenuation: 11db
    update_interval: never
    internal: True
    filters:
      - multiply: 1.68
    on_value:
      then:
        - component.update: battery_voltage
        - component.update: battery_percentage
  
  - platform: template
    id: battery_voltage
    name: "Battery Voltage"
    device_class: voltage
    entity_category: diagnostic
    unit_of_measurement: "V"
    accuracy_decimals: 2
    lambda: |-
      float v = id(adc_raw).state;
      v = v - 0.14;
      if (v >= 4.2) v = 4.2;
      id(battery_v) = v;
      return v;

  - platform: template
    id: battery_percentage
    name: "Battery"
    update_interval: never
    unit_of_measurement: "%"
    device_class: battery
    entity_category: diagnostic
    accuracy_decimals: 0
    lambda: |-
      float v = id(battery_v);
      if (v >= 4.2) return 100;
      else if (v <= 3.0) return 0;
      else return (v - 3.0) / (4.2 - 3.0) * 100.0;

text_sensor:
  - platform: homeassistant
    id: living_room_ac_mode
    entity_id: climate.living_room_ac
    on_value:
      then:
        - script.execute: set_current_states
        - script.execute: set_selections

  - platform: homeassistant
    id: office_ac_mode
    entity_id: climate.office_ac
    on_value:
      then:
        - script.execute: set_current_states
        - script.execute: set_selections

  - platform: homeassistant
    id: bedroom_ac_mode
    entity_id: climate.bedroom_ac
    on_value:
      then:
        - script.execute: set_current_states
        - script.execute: set_selections

  - platform: homeassistant
    id: living_room_fan_mode
    entity_id: climate.living_room_ac
    attribute: fan_mode
    on_value:
      then:
        - script.execute: set_current_states
        - script.execute: set_selections

  - platform: homeassistant
    id: office_fan_mode
    entity_id: climate.office_ac
    attribute: fan_mode
    on_value:
      then:
        - script.execute: set_current_states
        - script.execute: set_selections

  - platform: homeassistant
    id: bedroom_fan_mode
    entity_id: climate.bedroom_ac
    attribute: fan_mode
    on_value:
      then:
        - script.execute: set_current_states
        - script.execute: set_selections

binary_sensor:
  
  - platform: gpio
    pin: 
      allow_other_uses: true
      number: ${PIN_WAKE}
      mode: 
        input: True
        pullup: True
    name: "Test"
    internal: True
    filters:
      - invert: 
    on_press:
      then:
        - script.execute: turn_off

  - platform: gpio
    pin: 
      number: ${PIN_BTN_CONTRAST}
      mode: 
        input: True
        pullup: True
    name: "Contrast"
    internal: True
    filters:
      - invert: 
    on_press:
      then:
        - lambda: |-
            id(contrast) += 1;
            if (id(contrast) > 10) id(contrast) = 1;
            float contrast_value = id(contrast) * 1.0 / 10;
            ESP_LOGD("script", "Contrast = %f", contrast_value);
            id(oled_display).set_contrast(contrast_value);

  - platform: gpio
    pin: 
      number: ${PIN_BTN_SWITCH_AC}
      mode: 
        input: True
        pullup: True
    name: "Switch AC"
    internal: True
    filters:
      - invert: 
    on_press:
      then:
        - script.execute: reset_idle_timer
        - lambda: |-
            id(selected_ac_index) += 1;
            if (id(selected_ac_index) >= 3) id(selected_ac_index) = 0;
        - script.execute: update_selected_ac

  - platform: gpio
    pin:
      number: ${PIN_BTN_TOGGLE}
      mode: 
        input: True
        pullup: True
    filters:
      - invert: 
    name: "AC Toggle Button"
    internal: True
    on_press:
      then:
        - script.execute: reset_idle_timer
        - lambda: |-
            if (id(selected_ac_mode) == "off") {
              id(selected_ac_mode) = "cool";
            } else {
              id(selected_ac_mode) = "off";
            }

  - platform: gpio
    pin: 
      number: ${PIN_BTN_FAN}
      mode: 
        input: True
        pullup: True
    name: "Switch FAN Mode"
    internal: True
    filters:
      - invert: 
    on_press:
      then:
        - script.execute: change_fan_speed
        - script.execute: reset_idle_timer

  - platform: gpio
    pin: 
      number: ${PIN_BTN_MODE}
      mode: 
        input: True
        pullup: True
    name: "Switch Mode"
    internal: True
    filters:
      - invert: 
    on_press:
      then:
        - script.execute: reset_idle_timer
        - lambda: |-
            id(selected_ac_mode_index)++;
            if (id(selected_ac_mode_index) >= AC_MODES_COUNT) {
              id(selected_ac_mode_index) = 0;
            }
        - script.execute: update_selected_mode

  - platform: gpio
    pin:
      number: ${PIN_BTN_TEMP_UP}
      mode: 
        input: True
        pullup: True
    name: "Temp Up"
    internal: True
    filters:
      - invert: 
    on_press:
      then:
        - script.execute: reset_idle_timer
        - lambda: |-
            if (id(selected_temp) < 30) id(selected_temp)++;
            id(updated_ui) = true;
        - script.execute: update_display
        - script.execute: await

  - platform: gpio
    pin: 
      number: ${PIN_BTN_TEMP_DOWN}
      mode: 
        input: True
        pullup: True
    name: "Temp Down"
    internal: True
    filters:
      - invert: 
    on_press:
      then:
        - script.execute: reset_idle_timer
        - lambda: |-
            if (id(selected_temp) > 20) id(selected_temp)--;
            id(updated_ui) = true;
        - script.execute: update_display
        - script.execute: reset_idle_timer
        - script.execute: await

script:

  - id: test_screen
    then:
      - lambda: |-
          auto it = id(oled_display);
          it->clear();
          it->print(64, 50, id(small), COLOR_ON, display::TextAlign::CENTER, "BUBUBUBU");
          it->display();

  - id: boot_screen
    then:
      - lambda: |-
          auto it = id(oled_display);
          it->clear();
          it->print(64, 24, id(symbols), COLOR_ON, display::TextAlign::CENTER, "\ue88b");
          it->print(64, 50, id(small), COLOR_ON, display::TextAlign::CENTER, "LOADING");
          it->display();

  - id: turn_off
    mode: single
    then:
      - lambda: |-
          auto it = id(oled_display);
          it->clear();
          it->print(64, 32, id(basic), COLOR_ON, display::TextAlign::CENTER, "POWER OFF");
          it->display();
      - delay: 1s
      - lambda: |-
          auto it = id(oled_display);
          it->clear();
          it->display();
      - delay: 500ms
      - component.update: adc_raw
      - delay: 500ms
      - deep_sleep.enter: go_sleep


  - id: update_display
    then:
      - if:
          condition:
              lambda: 'return id(updated_ui) == true;'
          then:  
            - logger.log:
                format: "Screen Reloaded"
                level: DEBUG
            - lambda: |-
                auto it = id(oled_display);
                it->clear();

                int idx = id(selected_ac_index);
                auto mode = id(selected_ac_mode);
                auto fan_mode = id(selected_fan_mode);
                auto upper_selected_ac = id(selected_ac_name);
                for (auto & c : upper_selected_ac) c = toupper(c);

                if (mode == "off") {

                  it->print(64, 22, id(symbols_big), COLOR_ON, display::TextAlign::CENTER, "\ue8ac");
                  it->rectangle(0, 45, 128, 1);
                  it->print(64, 57, id(basic), COLOR_ON, display::TextAlign::CENTER, upper_selected_ac.c_str());


                } else if (mode == "cool") {
                  
                  // mode icon
                  it->print(5, 8, id(symbols), "\ueb3b");

                  // temperature
                  it->print(64, 22, id(big), COLOR_ON, display::TextAlign::CENTER, std::to_string(id(selected_temp)).c_str());
                  it->print(85, 4, id(basic), "C");
                  
                  // eco sign
                  // it->print(87, 12, id(symbols), "\uf8be");

                  if (fan_mode == "high") {
                    it->filled_rectangle(110, 8, 20, 7);
                  }
                  if (fan_mode == "high" or fan_mode == "medium") {
                    it->filled_rectangle(110, 18, 20, 7);
                  }
                  if (fan_mode == "high" or fan_mode == "medium" or fan_mode == "low") {
                    it->filled_rectangle(110, 28, 20, 7);
                  }

                  if (fan_mode == "auto") {
                    it->print(108, 8, id(bigger), "A");
                  }

                } else if (mode == "fan_only") {

                  it->print(5, 8, id(symbols), "\uf168");
                  
                  auto p_fan_mode = fan_mode;
                  if (p_fan_mode == "medium") {
                    p_fan_mode = "mid";
                  }

                  for (auto & c : p_fan_mode) c = toupper(c);
                  it->print(80, 22, id(bigger), COLOR_ON, display::TextAlign::CENTER, p_fan_mode.c_str());

                } else if (mode == "dry") {

                  it->print(5, 8, id(symbols), "\uf164");
                  it->print(80, 22, id(bigger), COLOR_ON, display::TextAlign::CENTER, "DRY");

                }

                if (mode != "off") {
                  
                  if (fan_mode == "auto") {
                    it->filled_rectangle(0, 38, 128, 14, COLOR_ON);
                    it->print(64, 45, id(basic), COLOR_OFF, display::TextAlign::CENTER, upper_selected_ac.c_str());
                    it->rectangle(42, 51, 44, 21);
                  } else {
                    it->rectangle(0, 38, 128, 1);
                    // selected AC
                    // it->print(64, 45, id(basic), COLOR_ON, display::TextAlign::CENTER, upper_selected_ac.c_str());
                    it->print(64, 46, id(basic), COLOR_ON, display::TextAlign::CENTER, upper_selected_ac.c_str());

                    // draw button guides on UI
                    it->rectangle(0, 53, 128, 1);
                    it->rectangle(42, 53, 44, 19);
                  }
                  
                  

                  it->print(21, 59, id(small), COLOR_ON, display::TextAlign::CENTER, "MODE");
                  
                  if (mode == "cool" or mode == "fan_only") {
                    it->print(107, 59, id(small), COLOR_ON, display::TextAlign::CENTER, "FAN");
                  }

                  it->printf(64, 59, id(small), COLOR_ON, display::TextAlign::CENTER, "%.2f V", id(battery_voltage).state);
                  
                  // icons
                  // it->print(18, 58, id(symbols_small), COLOR_ON, display::TextAlign::CENTER, "\ueae6");
                  // it->print(64, 58, id(symbols_small), COLOR_ON, display::TextAlign::CENTER, "\uea35");
                  // if (mode == "cool" or mode == "fan_only") {
                  //   it->print(118, 57, id(symbols_small), COLOR_ON, display::TextAlign::CENTER, "\uf887");
                  // }
                }

                // it->display();
                
                id(updated_ui) = false;
  
  - id: set_current_states
    mode: restart
    then:
      lambda: |-
        int idx = id(selected_ac_index);
        if (idx == 0) {
          id(current_temp) = (int)id(living_room_ac_temp).state;
          id(current_ac_mode) = id(living_room_ac_mode).state;
          id(current_fan_mode) = id(living_room_fan_mode).state;
        } else if (idx == 1) {
          id(current_temp) = (int)id(office_ac_temp).state;
          id(current_ac_mode) = id(office_ac_mode).state;
          id(current_fan_mode) = id(office_fan_mode).state;
        } else if (idx == 2) {
          id(current_temp) = (int)id(bedroom_ac_temp).state;
          id(current_ac_mode) = id(bedroom_ac_mode).state;
          id(current_fan_mode) = id(bedroom_fan_mode).state;
        }

        if (id(current_ac_mode) == "") {
          id(current_ac_mode) = "unknown";
          id(current_fan_mode) = "unknown";
          id(current_temp) = -1;
        }

  - id: set_selections
    mode: restart
    then:
      lambda: |-
        if (id(current_ac_mode) != "unknown" and id(current_ac_mode) != "") {
          id(selected_ac_mode) = id(current_ac_mode);
          for (int i = 0; i < AC_MODES_COUNT; i++) {
            if (strcmp(AC_MODES[i], id(selected_ac_mode).c_str()) == 0) {
              id(selected_ac_mode_index) = i;
              break;
            }
          }
          id(selected_temp) = id(current_temp);
          id(selected_fan_mode) = id(current_fan_mode);

          std::vector<std::string> fan_speeds;
          if (id(selected_ac_index) == 0) {
            fan_speeds = {"low", "high"};
          } else {
            fan_speeds = {"auto", "low", "medium", "high"};
          }

          for (int i = 0; i < AC_MODES_COUNT; i++) {
            if (strcmp(AC_MODES[i], id(current_fan_mode).c_str()) == 0) {
              id(selected_fan_index) = i;
              break;
            }
          }

          id(updated_ui) = true;
        }

  - id: update_selected_ac
    then:
      - lambda: |-
          int idx = id(selected_ac_index);
          if (idx >= 0 && idx < AC_LIST_COUNT) {
            id(selected_ac) = AC_LIST[idx].entity_id;
            id(selected_ac_name) = AC_LIST[idx].name;
          }
      - script.execute: set_current_states
      - script.execute: set_selections
      - script.execute: update_display

  - id: update_selected_mode
    then:
      - lambda: |-
          int idx = id(selected_ac_mode_index);
          if (idx >= 0 && idx < AC_MODES_COUNT) {
            id(selected_ac_mode) = AC_MODES[idx];
          }
          id(updated_ui) = true;
      - script.execute: await

  - id: change_fan_speed
    mode: restart
    then:
      - lambda: |-
          std::vector<std::string> fan_speeds;
          if (id(selected_ac_index) == 0) {
            fan_speeds = {"low", "high"};
          } else {
            fan_speeds = {"auto", "low", "medium", "high"};
          }

          id(selected_fan_index)++;
          if (id(selected_fan_index) >= fan_speeds.size()) {
            id(selected_fan_index) = 0;
          }

          id(selected_fan_mode) = fan_speeds[id(selected_fan_index)];
          id(updated_ui) = true;
      - script.execute: update_display
      - script.execute: await

  - id: send_mode_update
    mode: queued
    then:
      - logger.log:
          format: "Change Mode for %s :: %s"
          args: [ 'id(selected_ac).c_str()', 'id(selected_ac_mode).c_str()' ]
          level: DEBUG
      - homeassistant.service:
          service: climate.set_hvac_mode
          data:
            entity_id: !lambda 'return id(selected_ac);'
            hvac_mode: !lambda 'return id(selected_ac_mode);'

  - id: send_temp_update
    mode: queued
    then:
      - logger.log:
          format: "Change Temp for %s :: %d"
          args: [ 'id(selected_ac).c_str()', 'id(selected_temp)' ]
          level: DEBUG
      - homeassistant.service:
          service: climate.set_temperature
          data:
            entity_id: !lambda 'return id(selected_ac);'
            temperature: !lambda 'return id(selected_temp);'

  - id: send_fan_update
    mode: queued
    then:
      - logger.log:
          format: "Change Fan Mode for %s :: %s"
          args: [ 'id(selected_ac).c_str()', 'id(selected_fan_mode).c_str()' ]
          level: DEBUG
      - homeassistant.service:
          service: climate.set_fan_mode
          data:
            entity_id: !lambda 'return id(selected_ac);'
            fan_mode: !lambda 'return id(selected_fan_mode);'

  - id: update_ac
    then:
      - if:
          condition:
              lambda: 'return id(debounce_active) == false and id(selected_ac_mode) != id(current_ac_mode);'
          then:  
            - script.execute: send_mode_update
      - if:
          condition:
              lambda: 'return id(debounce_active) == false and id(selected_fan_mode) != id(current_fan_mode);'
          then:  
            - script.execute: send_fan_update
      - if:
          condition:
              lambda: 'return id(debounce_active) == false and id(selected_temp) != id(current_temp);'
          then:  
            - script.execute: send_temp_update
      - script.execute: set_current_states
      - script.execute: update_display

  - id: reset_idle_timer
    mode: restart
    then:
      - lambda: |-
          id(last_active) = millis() / 1000;

  - id: await
    mode: restart
    then:
      - lambda: |-
          id(debounce_active) = true;
      - delay: 1s
      - lambda: |-
          id(debounce_active) = false;


interval:
  - interval: 500ms
    then:
      - if:
          condition:
              lambda: 'return (millis() / 1000) - id(last_active) >= 120;' # 2 minutes todo: change
          then:
            - script.execute: turn_off
          else:
            - if:
                condition:
                    lambda: 'return id(current_ac_mode) == "unknown";'
                then:
                  - script.execute: boot_screen
                else:
                  - script.execute: update_ac